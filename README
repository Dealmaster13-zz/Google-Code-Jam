Hello, if you would like to get involved in Google Code Jam 2011, then too bad because it's over already.

Github is the most complicatedest thing ever.


/******************
Bot Trust
******************/

import java.util.*;

/**
 * Write a description of class BotTrust here.
 * 
 * @author Oliver Allbless
 * @version Working
 */
public class BotTrust
{
    public TextFileReader tfr = new TextFileReader();

    public int oIndex = 1;
    public int bIndex = 1;

    public BotTrust()
    {
        String[] inputArray = tfr.TextFileReader();

        int varN = Integer.parseInt(inputArray[0]);

        String[] rStringArray = new String[0];
        char[] rArray;

        String[] pStringArray = new String[0];
        int[] pArray;

        String[][] rAndPStringArray;

        String[] testCaseString;

        //for each test case
        for (int i = 1; i <= varN; i ++)
        {
            oIndex = 1;
            bIndex = 1;

            testCaseString = tfr.splitString(inputArray[i], " ");

            rAndPStringArray = tfr.splitAlternatingValues(testCaseString, 1);

            rStringArray = rAndPStringArray[0];

            pStringArray = rAndPStringArray[1];

            rArray = tfr.stringArrayToCharArray(rStringArray);

            pArray = tfr.stringArrayToIntArray(pStringArray);

            int totalTasks = rArray.length;

            int taskIndex = 0;

            boolean nextRobotWaiting = false;

            int nextRobotIndex = 0;

            int secondsTaken = 0;

            boolean currentMoved = false;
            boolean nextMoved = false;

            boolean completed = false;

            while (taskIndex < totalTasks)
            {
                nextRobotWaiting = false;

                while (nextRobotIndex < totalTasks && !nextRobotWaiting)
                {
                    if (rArray[taskIndex] != rArray[nextRobotIndex])
                    {
                        nextRobotWaiting = true;
                    }
                    else
                    {
                        nextRobotIndex ++;
                    }
                }

                currentMoved = moveRobotTowardsTarget(rArray[taskIndex], pArray[taskIndex]);

                if (nextRobotWaiting)
                {
                    nextMoved = moveRobotTowardsTarget(rArray[nextRobotIndex], pArray[nextRobotIndex]);
                }

                boolean canPressButton = false;

                if (!currentMoved)
                {
                    if (rArray[taskIndex] == 'O')
                    {
                        if (oIndex == pArray[taskIndex])
                        {
                            canPressButton = true;
                        }
                    }
                    else
                    {
                        if (bIndex == pArray[taskIndex])
                        {
                            canPressButton = true;
                        }
                    }

                    if (canPressButton)
                    {
                        taskIndex ++;
                    }
                }

                secondsTaken ++;
            }

            System.out.println("Case #"+i+": "+secondsTaken);
        }
    }

    private boolean moveRobotTowardsTarget(char robot, int targetIndex)
    {
        boolean moved = false;

        if (robot == 'O')
        {
            if (getIncrementToTarget(oIndex, targetIndex) != 0)
            {
                moved = true;
            }

            oIndex += getIncrementToTarget(oIndex, targetIndex);
        }
        else
        {
            if (getIncrementToTarget(bIndex, targetIndex) != 0)
            {
                moved = true;
            }

            bIndex += getIncrementToTarget(bIndex, targetIndex);
        }

        return moved;
    }

    private int getIncrementToTarget(int currentIndex, int targetIndex)
    {
        int increment = 0;

        if (currentIndex > targetIndex)
        {
            increment = -1;
        }
        else if (currentIndex < targetIndex)
        {
            increment = 1;
        }

        return increment;
    }
}


/******************
Candy Splitting
******************/

import java.util.*;

/**
 * Write a description of class CandySplitting here.
 * 
 * @author Oliver Allbless
 * @version Working
 */
public class CandySplitting
{
    public TextFileReader tfr = new TextFileReader();

    public CandySplitting()
    {
        String[] inputArray = tfr.TextFileReader();
        
        boolean booleanSwitch = false;
        
        int inputArrayLength = inputArray.length;
        
        String[] nStringArray;
        int[] nArray;
        
        String[] cStringArray;
        int[] cArray;
        
        String[][] nAndCStringArray;
        
        nAndCStringArray = tfr.splitAlternatingValues(inputArray, 1);
        
        nStringArray = nAndCStringArray[0];
        
        cStringArray = nAndCStringArray[1];
        
        nArray = tfr.stringArrayToIntArray(nStringArray);
        
        int nArrayLength = nArray.length;
        
        for (int i = 0; i < nArrayLength; i ++)
        {
            cArray = tfr.stringArrayToIntArray(tfr.splitString(cStringArray[i], " "));
            
            int cArrayLength = cArray.length;
            
            int[] binaryArraySum = tfr.intToBinaryArray(cArray[0]);
            
            //add all c values together to see if splitting in equal halves is possible
            for (int j = 1; j < cArrayLength; j ++)
            {
                binaryArraySum = patrickAdd(binaryArraySum, tfr.intToBinaryArray(cArray[j]));
            }
            
            if (tfr.binaryArrayToInt(binaryArraySum) == 0)
            {
                //sum of all apart from that of least value
                int lowestCandyValue = tfr.getLowestValueInIntArray(cArray);
                
                int maxSeanTotalCandyValue = tfr.getSumOfIntArray(cArray) - lowestCandyValue;
                
                System.out.println("Case #"+(i + 1)+": "+maxSeanTotalCandyValue);
            }
            else
            {
                System.out.println("Case #"+(i + 1)+": NO");
            }
        }
    }
    
    public int[] patrickAdd(int[] intA, int[] intB)
    {
        int[] binaryArray = tfr.createIntArray(intA.length, 0);
        
        for (int i = intA.length - 1; i >= 0; i --)
        {
            if (intA[i] == 1 ^ intB[i] == 1)
            {
                binaryArray[i] = 1;
            }
        }
        
        return binaryArray;
    }
    
    public int[] seanAdd(int[] intA, int[] intB)
    {
        return tfr.intToBinaryArray(tfr.binaryArrayToInt(intA) + tfr.binaryArrayToInt(intB));
    }
}


/******************
Text File Reader (a helper class)
******************/

import java.io.*;
import java.util.*;

/**
 * Write a description of class TextFileReader here.
 * 
 * @author Oliver Allbless
 * @version Working
 */
public class TextFileReader
{
    public BufferedReader br;
    public String fileName = "text.txt";

    public String[] TextFileReader()
    {
        openFile();

        String input;

        Stack<String> inputStack = new Stack();

        do
        {
            input = readOneLine();

            if (input != null)
            {
                inputStack.push(input);
            }
        } while(input != null);

        return stackToStringArray(inputStack);
    }

    public void openFile()
    {
        try
        {
            br = new BufferedReader(new FileReader(fileName));
        }
        catch (Exception e)
        {

        }
    }

    public String readOneLine()
    {
        String input = new String();

        try
        {
            input = br.readLine();
        }
        catch (Exception e)
        {
            System.out.println("IO error trying to read from the file");
            System.exit(1);
        }

        return input;
    }

    public String[] splitString(String string, String splitVariable)
    {
        return string.split(splitVariable);
    }
    
    public String[] stackToStringArray(Stack<String> stack)
    {
        String[] stringArray = new String[stack.size()];
        
        for (int i = stack.size() - 1; i >= 0; i --)
        {
            stringArray[i] = stack.pop();
        }
        
        return stringArray;
    }
    
    public String[] getStringArrayPortion(String[] stringArray, int startIndex, int endIndex)
    {
        String[] stringPortion = new String[endIndex - startIndex + 1];
        
        for (int i = startIndex; i <= endIndex; i ++)
        {
            stringPortion[i - startIndex] = stringArray[i];
        }
        
        return stringPortion;
    }
    
    public void traceStringArray(String[] stringArray)
    {
        for (int i = 0; i < stringArray.length; i ++)
        {
            System.out.println(stringArray[i]);
        }
    }
    
    public boolean[] createBooleanArray(int arrayLength, boolean booleanValue)
    {
        boolean[] booleanArray = new boolean[arrayLength];
        
        for (int i = 0; i < arrayLength; i ++)
        {
            booleanArray[i] = booleanValue;
        }
        
        return booleanArray;
    }
    
    public int[] createIntArray(int arrayLength, int intValue)
    {
        int[] intArray = new int[arrayLength];
        
        for (int i = 0; i < arrayLength; i ++)
        {
            intArray[i] = intValue;
        }
        
        return intArray;
    }
    
    public int countBooleanValues(boolean[] booleanArray, boolean booleanValue)
    {
        int count = 0;
        
        for (int i = booleanArray.length - 1; i >= 0; i --)
        {
            if (booleanArray[i] == booleanValue)
            {
                count ++;
            }
        }
        
        return count;
    }
    
    public String[][] splitAlternatingValues(String[] wholeArray, int startIndex)
    {
        String[] arrayA;
        String[] arrayB;
        
        int wholeArrayLength = wholeArray.length;
        
        int splittedArrayLength = (wholeArrayLength - startIndex) / 2;
        
        arrayA = new String[splittedArrayLength];
        
        arrayB = new String[splittedArrayLength];
        
        boolean booleanSwitch = false;
        
        int splittedArrayIndex = 0;
        
        for (int i = startIndex; i < wholeArrayLength; i ++)
        {
            booleanSwitch = !booleanSwitch;
            
            if (booleanSwitch)
            {
                arrayA[splittedArrayIndex] = wholeArray[i];
            }
            else
            {
                arrayB[splittedArrayIndex] = wholeArray[i];
                
                splittedArrayIndex ++;
            }
        }
        
        String[][] splittedArrays = new String[2][splittedArrayLength];
        splittedArrays[0] = arrayA;
        splittedArrays[1] = arrayB;
        
        return splittedArrays;
    }
    
    public char[] stringArrayToCharArray(String[] stringArray)
    {
        int stringArrayLength = stringArray.length;
        
        char[] charArray = new char[stringArrayLength];
        
        for (int i = 0; i < stringArrayLength; i ++)
        {
            charArray[i] = stringArray[i].charAt(0);
        }
        
        return charArray;
    }
    
    public int[] stringArrayToIntArray(String[] stringArray)
    {
        int stringArrayLength = stringArray.length;
        
        int[] intArray = new int[stringArrayLength];
        
        for (int i = 0; i < stringArrayLength; i ++)
        {
            intArray[i] = Integer.parseInt(stringArray[i]);
        }
        
        return intArray;
    }
    
    public int[] intToBinaryArray(int number)
    {
        int[] binaryArray = createIntArray(32, 0);
        
        int binaryIndex = 32;
        
        int bitValue = 0;
        
        while (number > 0)
        {
            bitValue = (int)Math.pow(2, binaryIndex);
            
            if (bitValue <= number)
            {
                binaryArray[binaryIndex] = 1;
                
                number -= bitValue;
            }
            
            binaryIndex --;
        }
        
        return binaryArray;
    }
    
    public int binaryArrayToInt(int[] binaryArray)
    {
        int denaryValue = 0;  
        
        for (int i = binaryArray.length - 1; i >= 0; i --)
        {
            if (binaryArray[i] == 1)
            {
                denaryValue += (int)Math.pow(2, i);
            }
        }
        
        return denaryValue;
    }
    
    public int getLowestValueInIntArray(int[] intArray)
    {
        int lowestValue = 2147483647;
        
        int intArrayLength = intArray.length;
        
        for (int i = 0; i < intArrayLength; i ++)
        {
            if (intArray[i] < lowestValue)
            {
                lowestValue = intArray[i];
            }
        }
        
        return lowestValue;
    }
    
    public int getSumOfIntArray(int[] intArray)
    {
        int sumOfIntArray = 0;
        
        int intArrayLength = intArray.length;
        
        for (int i = 0; i < intArrayLength; i ++)
        {
            sumOfIntArray += intArray[i];
        }
        
        return sumOfIntArray;
    }
}